//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eagle.Core.Configuration
{
    
    /// <summary>
    /// The EAppConfigurationSection Configuration Section.
    /// </summary>
    public partial class EAppConfigurationSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the EAppConfigurationSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EAppConfigurationSectionSectionName = "EApp";
        
        /// <summary>
        /// Gets the EAppConfigurationSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public static global::Eagle.Core.Configuration.EAppConfigurationSection Instance
        {
            get
            {
                return ((global::Eagle.Core.Configuration.EAppConfigurationSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Eagle.Core.Configuration.EAppConfigurationSection.EAppConfigurationSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ObjectContainer Property
        /// <summary>
        /// The XML name of the <see cref="ObjectContainer"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ObjectContainerPropertyName = "objectContainer";
        
        /// <summary>
        /// Gets or sets the ObjectContainer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The ObjectContainer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.ObjectContainerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.CurrentObjectContainerElement ObjectContainer
        {
            get
            {
                return ((global::Eagle.Core.Configuration.CurrentObjectContainerElement)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.ObjectContainerPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.EAppConfigurationSection.ObjectContainerPropertyName] = value;
            }
        }
        #endregion
        
        #region Logger Property
        /// <summary>
        /// The XML name of the <see cref="Logger"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string LoggerPropertyName = "logger";
        
        /// <summary>
        /// Gets or sets the Logger.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Logger.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.LoggerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.CurrentLoggerElement Logger
        {
            get
            {
                return ((global::Eagle.Core.Configuration.CurrentLoggerElement)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.LoggerPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.EAppConfigurationSection.LoggerPropertyName] = value;
            }
        }
        #endregion
        
        #region Application Property
        /// <summary>
        /// The XML name of the <see cref="Application"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ApplicationPropertyName = "application";
        
        /// <summary>
        /// Gets or sets the Application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Application.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.ApplicationPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.CurrentApplicationElement Application
        {
            get
            {
                return ((global::Eagle.Core.Configuration.CurrentApplicationElement)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.ApplicationPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.EAppConfigurationSection.ApplicationPropertyName] = value;
            }
        }
        #endregion
        
        #region PluginContainer Property
        /// <summary>
        /// The XML name of the <see cref="PluginContainer"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PluginContainerPropertyName = "pluginContainer";
        
        /// <summary>
        /// Gets or sets the PluginContainer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The PluginContainer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.PluginContainerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.PluginContainerElement PluginContainer
        {
            get
            {
                return ((global::Eagle.Core.Configuration.PluginContainerElement)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.PluginContainerPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.EAppConfigurationSection.PluginContainerPropertyName] = value;
            }
        }
        #endregion
        
        #region MiscSettings Property
        /// <summary>
        /// The XML name of the <see cref="MiscSettings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string MiscSettingsPropertyName = "miscSettings";
        
        /// <summary>
        /// Gets or sets the MiscSettings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The MiscSettings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.MiscSettingsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.MiscSettingElementCollection MiscSettings
        {
            get
            {
                return ((global::Eagle.Core.Configuration.MiscSettingElementCollection)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.MiscSettingsPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.EAppConfigurationSection.MiscSettingsPropertyName] = value;
            }
        }
        #endregion
        
        #region ResourceManagers Property
        /// <summary>
        /// The XML name of the <see cref="ResourceManagers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ResourceManagersPropertyName = "resources";
        
        /// <summary>
        /// Gets or sets the ResourceManagers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The ResourceManagers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.ResourceManagersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.ResourceElementCollection ResourceManagers
        {
            get
            {
                return ((global::Eagle.Core.Configuration.ResourceElementCollection)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.ResourceManagersPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.EAppConfigurationSection.ResourceManagersPropertyName] = value;
            }
        }
        #endregion
        
        #region WindowsMvc Property
        /// <summary>
        /// The XML name of the <see cref="WindowsMvc"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string WindowsMvcPropertyName = "windowsMvc";
        
        /// <summary>
        /// Gets or sets the WindowsMvc.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The WindowsMvc.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.WindowsMvcPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.WindowsMvcElement WindowsMvc
        {
            get
            {
                return ((global::Eagle.Core.Configuration.WindowsMvcElement)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.WindowsMvcPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.EAppConfigurationSection.WindowsMvcPropertyName] = value;
            }
        }
        #endregion
        
        #region SerializationFormats Property
        /// <summary>
        /// The XML name of the <see cref="SerializationFormats"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string SerializationFormatsPropertyName = "serializationFormats";
        
        /// <summary>
        /// Gets or sets the SerializationFormats.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The SerializationFormats.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.SerializationFormatsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.SerializationFormatElementCollection SerializationFormats
        {
            get
            {
                return ((global::Eagle.Core.Configuration.SerializationFormatElementCollection)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.SerializationFormatsPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.EAppConfigurationSection.SerializationFormatsPropertyName] = value;
            }
        }
        #endregion
        
        #region CacheManagers Property
        /// <summary>
        /// The XML name of the <see cref="CacheManagers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string CacheManagersPropertyName = "cacheManagers";
        
        /// <summary>
        /// Gets or sets the CacheManagers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The CacheManagers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.CacheManagersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.CacheManagerElementCollection CacheManagers
        {
            get
            {
                return ((global::Eagle.Core.Configuration.CacheManagerElementCollection)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.CacheManagersPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.EAppConfigurationSection.CacheManagersPropertyName] = value;
            }
        }
        #endregion
        
        #region Redis Property
        /// <summary>
        /// The XML name of the <see cref="Redis"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string RedisPropertyName = "redis";
        
        /// <summary>
        /// Gets or sets the Redis.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Redis.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.RedisPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.RedisElement Redis
        {
            get
            {
                return ((global::Eagle.Core.Configuration.RedisElement)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.RedisPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.EAppConfigurationSection.RedisPropertyName] = value;
            }
        }
        #endregion
        
        #region Handlers Property
        /// <summary>
        /// The XML name of the <see cref="Handlers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string HandlersPropertyName = "handlers";
        
        /// <summary>
        /// Gets or sets the Handlers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Handlers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.HandlersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.HandlerElementCollection Handlers
        {
            get
            {
                return ((global::Eagle.Core.Configuration.HandlerElementCollection)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.HandlersPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.EAppConfigurationSection.HandlersPropertyName] = value;
            }
        }
        #endregion
        
        #region Generators Property
        /// <summary>
        /// The XML name of the <see cref="Generators"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string GeneratorsPropertyName = "generators";
        
        /// <summary>
        /// Gets or sets the Generators.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Generators.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.EAppConfigurationSection.GeneratorsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.GeneratorsElement Generators
        {
            get
            {
                return ((global::Eagle.Core.Configuration.GeneratorsElement)(base[global::Eagle.Core.Configuration.EAppConfigurationSection.GeneratorsPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.EAppConfigurationSection.GeneratorsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The CurrentObjectContainerElement Configuration Element.
    /// </summary>
    public partial class CurrentObjectContainerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the Provider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Provider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.CurrentObjectContainerElement.ProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.CurrentObjectContainerElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.CurrentObjectContainerElement.ProviderPropertyName] = value;
            }
        }
        #endregion
        
        #region InitFromConfigFile Property
        /// <summary>
        /// The XML name of the <see cref="InitFromConfigFile"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string InitFromConfigFilePropertyName = "initFromConfigFile";
        
        /// <summary>
        /// Gets or sets the InitFromConfigFile.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The InitFromConfigFile.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.CurrentObjectContainerElement.InitFromConfigFilePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool InitFromConfigFile
        {
            get
            {
                return ((bool)(base[global::Eagle.Core.Configuration.CurrentObjectContainerElement.InitFromConfigFilePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.CurrentObjectContainerElement.InitFromConfigFilePropertyName] = value;
            }
        }
        #endregion
        
        #region SectionName Property
        /// <summary>
        /// The XML name of the <see cref="SectionName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string SectionNamePropertyName = "sectionName";
        
        /// <summary>
        /// Gets or sets the SectionName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The SectionName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.CurrentObjectContainerElement.SectionNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string SectionName
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.CurrentObjectContainerElement.SectionNamePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.CurrentObjectContainerElement.SectionNamePropertyName] = value;
            }
        }
        #endregion
        
        #region File Property
        /// <summary>
        /// The XML name of the <see cref="File"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string FilePropertyName = "file";
        
        /// <summary>
        /// Gets or sets the File.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The File.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.CurrentObjectContainerElement.FilePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string File
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.CurrentObjectContainerElement.FilePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.CurrentObjectContainerElement.FilePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The CurrentLoggerElement Configuration Element.
    /// </summary>
    public partial class CurrentLoggerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the Provider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Provider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.CurrentLoggerElement.ProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.CurrentLoggerElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.CurrentLoggerElement.ProviderPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The CurrentApplicationElement Configuration Element.
    /// </summary>
    public partial class CurrentApplicationElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the Provider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Provider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.CurrentApplicationElement.ProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.CurrentApplicationElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.CurrentApplicationElement.ProviderPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// A collection of PluginRegisterElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Eagle.Core.Configuration.PluginRegisterElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Eagle.Core.Configuration.PluginRegisterElementCollection.PluginRegisterElementPropertyName)]
    public partial class PluginRegisterElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PluginRegisterElementPropertyName = "register";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Eagle.Core.Configuration.PluginRegisterElementCollection.PluginRegisterElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Eagle.Core.Configuration.PluginRegisterElementCollection.PluginRegisterElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Eagle.Core.Configuration.PluginRegisterElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Eagle.Core.Configuration.PluginRegisterElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.PluginRegisterElement this[int index]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.PluginRegisterElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.PluginRegisterElement this[object name]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.PluginRegisterElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="register">The <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Eagle.Core.Configuration.PluginRegisterElement register)
        {
            base.BaseAdd(register);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="register">The <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Eagle.Core.Configuration.PluginRegisterElement register)
        {
            base.BaseRemove(this.GetElementKey(register));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.PluginRegisterElement GetItemAt(int index)
        {
            return ((global::Eagle.Core.Configuration.PluginRegisterElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.PluginRegisterElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.PluginRegisterElement GetItemByKey(string name)
        {
            return ((global::Eagle.Core.Configuration.PluginRegisterElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The PluginRegisterElement Configuration Element.
    /// </summary>
    public partial class PluginRegisterElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.PluginRegisterElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.PluginRegisterElement.NamePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.PluginRegisterElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.PluginRegisterElement.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.PluginRegisterElement.TypePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.PluginRegisterElement.TypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The PluginContainerElement Configuration Element.
    /// </summary>
    public partial class PluginContainerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Host Property
        /// <summary>
        /// The XML name of the <see cref="Host"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string HostPropertyName = "host";
        
        /// <summary>
        /// Gets or sets the Host.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Host.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.PluginContainerElement.HostPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.PluginHostElement Host
        {
            get
            {
                return ((global::Eagle.Core.Configuration.PluginHostElement)(base[global::Eagle.Core.Configuration.PluginContainerElement.HostPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.PluginContainerElement.HostPropertyName] = value;
            }
        }
        #endregion
        
        #region PluginRegisters Property
        /// <summary>
        /// The XML name of the <see cref="PluginRegisters"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PluginRegistersPropertyName = "pluginRegisters";
        
        /// <summary>
        /// Gets or sets the PluginRegisters.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The PluginRegisters.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.PluginContainerElement.PluginRegistersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.PluginRegisterElementCollection PluginRegisters
        {
            get
            {
                return ((global::Eagle.Core.Configuration.PluginRegisterElementCollection)(base[global::Eagle.Core.Configuration.PluginContainerElement.PluginRegistersPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.PluginContainerElement.PluginRegistersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The SingleProviderElement Configuration Element.
    /// </summary>
    public partial class SingleProviderElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the Provider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Provider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.SingleProviderElement.ProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.SingleProviderElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.SingleProviderElement.ProviderPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The PluginHostElement Configuration Element.
    /// </summary>
    public partial class PluginHostElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the Provider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Provider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.PluginHostElement.ProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.PluginHostElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.PluginHostElement.ProviderPropertyName] = value;
            }
        }
        #endregion
        
        #region PluginProvider Property
        /// <summary>
        /// The XML name of the <see cref="PluginProvider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string PluginProviderPropertyName = "pluginProvider";
        
        /// <summary>
        /// Gets or sets the PluginProvider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The PluginProvider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.PluginHostElement.PluginProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.SingleProviderElement PluginProvider
        {
            get
            {
                return ((global::Eagle.Core.Configuration.SingleProviderElement)(base[global::Eagle.Core.Configuration.PluginHostElement.PluginProviderPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.PluginHostElement.PluginProviderPropertyName] = value;
            }
        }
        #endregion
        
        #region ServiceProvider Property
        /// <summary>
        /// The XML name of the <see cref="ServiceProvider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ServiceProviderPropertyName = "serviceProvider";
        
        /// <summary>
        /// Gets or sets the ServiceProvider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The ServiceProvider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.PluginHostElement.ServiceProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.SingleProviderElement ServiceProvider
        {
            get
            {
                return ((global::Eagle.Core.Configuration.SingleProviderElement)(base[global::Eagle.Core.Configuration.PluginHostElement.ServiceProviderPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.PluginHostElement.ServiceProviderPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// A collection of ParamElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Eagle.Core.Configuration.ParamElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Eagle.Core.Configuration.ConstructorElementCollection.ParamElementPropertyName)]
    public partial class ConstructorElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Eagle.Core.Configuration.ParamElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ParamElementPropertyName = "paramElement";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Eagle.Core.Configuration.ConstructorElementCollection.ParamElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Eagle.Core.Configuration.ConstructorElementCollection.ParamElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Eagle.Core.Configuration.ParamElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Eagle.Core.Configuration.ParamElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Eagle.Core.Configuration.ParamElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Eagle.Core.Configuration.ParamElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.ParamElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.ParamElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.ParamElement this[int index]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.ParamElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.ParamElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.ParamElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.ParamElement this[object name]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.ParamElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Eagle.Core.Configuration.ParamElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="paramElement">The <see cref="global::Eagle.Core.Configuration.ParamElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Eagle.Core.Configuration.ParamElement paramElement)
        {
            base.BaseAdd(paramElement);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Eagle.Core.Configuration.ParamElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="paramElement">The <see cref="global::Eagle.Core.Configuration.ParamElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Eagle.Core.Configuration.ParamElement paramElement)
        {
            base.BaseRemove(this.GetElementKey(paramElement));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.ParamElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.ParamElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.ParamElement GetItemAt(int index)
        {
            return ((global::Eagle.Core.Configuration.ParamElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.ParamElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.ParamElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.ParamElement GetItemByKey(string name)
        {
            return ((global::Eagle.Core.Configuration.ParamElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The ParamElement Configuration Element.
    /// </summary>
    public partial class ParamElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.ParamElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.ParamElement.NamePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.ParamElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.ParamElement.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.ParamElement.TypePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.ParamElement.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.ParamElement.ValuePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.SingleValueElement Value
        {
            get
            {
                return ((global::Eagle.Core.Configuration.SingleValueElement)(base[global::Eagle.Core.Configuration.ParamElement.ValuePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.ParamElement.ValuePropertyName] = value;
            }
        }
        #endregion
        
        #region Dependency Property
        /// <summary>
        /// The XML name of the <see cref="Dependency"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DependencyPropertyName = "dependency";
        
        /// <summary>
        /// Gets or sets the Dependency.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Dependency.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.ParamElement.DependencyPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.DependencyElement Dependency
        {
            get
            {
                return ((global::Eagle.Core.Configuration.DependencyElement)(base[global::Eagle.Core.Configuration.ParamElement.DependencyPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.ParamElement.DependencyPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The SingleValueElement Configuration Element.
    /// </summary>
    public partial class SingleValueElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.SingleValueElement.ValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Value
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.SingleValueElement.ValuePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.SingleValueElement.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The DependencyElement Configuration Element.
    /// </summary>
    public partial class DependencyElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.DependencyElement.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.DependencyElement.TypePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.DependencyElement.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region Constructors Property
        /// <summary>
        /// The XML name of the <see cref="Constructors"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ConstructorsPropertyName = "constructors";
        
        /// <summary>
        /// Gets or sets the Constructors.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Constructors.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.DependencyElement.ConstructorsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.ConstructorElementCollection Constructors
        {
            get
            {
                return ((global::Eagle.Core.Configuration.ConstructorElementCollection)(base[global::Eagle.Core.Configuration.DependencyElement.ConstructorsPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.DependencyElement.ConstructorsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The ProviderElement Configuration Element.
    /// </summary>
    public partial class ProviderElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the Provider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Provider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.ProviderElement.ProviderPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.ProviderElement.ProviderPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.ProviderElement.ProviderPropertyName] = value;
            }
        }
        #endregion
        
        #region Constructors Property
        /// <summary>
        /// The XML name of the <see cref="Constructors"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ConstructorsPropertyName = "constructors";
        
        /// <summary>
        /// Gets or sets the Constructors.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Constructors.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.ProviderElement.ConstructorsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.ConstructorElementCollection Constructors
        {
            get
            {
                return ((global::Eagle.Core.Configuration.ConstructorElementCollection)(base[global::Eagle.Core.Configuration.ProviderElement.ConstructorsPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.ProviderElement.ConstructorsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// A collection of MiscSettingAddElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Eagle.Core.Configuration.MiscSettingAddElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Eagle.Core.Configuration.MiscSettingElementCollection.MiscSettingAddElementPropertyName)]
    public partial class MiscSettingElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string MiscSettingAddElementPropertyName = "add";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Eagle.Core.Configuration.MiscSettingElementCollection.MiscSettingAddElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Eagle.Core.Configuration.MiscSettingElementCollection.MiscSettingAddElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Eagle.Core.Configuration.MiscSettingAddElement)(element)).key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Eagle.Core.Configuration.MiscSettingAddElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.MiscSettingAddElement this[int index]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.MiscSettingAddElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.MiscSettingAddElement this[object key]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.MiscSettingAddElement)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Eagle.Core.Configuration.MiscSettingAddElement add)
        {
            base.BaseAdd(add);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Eagle.Core.Configuration.MiscSettingAddElement add)
        {
            base.BaseRemove(this.GetElementKey(add));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.MiscSettingAddElement GetItemAt(int index)
        {
            return ((global::Eagle.Core.Configuration.MiscSettingAddElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::Eagle.Core.Configuration.MiscSettingAddElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.MiscSettingAddElement GetItemByKey(string key)
        {
            return ((global::Eagle.Core.Configuration.MiscSettingAddElement)(base.BaseGet(((object)(key)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The MiscSettingAddElement Configuration Element.
    /// </summary>
    public partial class MiscSettingAddElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region key Property
        /// <summary>
        /// The XML name of the <see cref="key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string keyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.MiscSettingAddElement.keyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string key
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.MiscSettingAddElement.keyPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.MiscSettingAddElement.keyPropertyName] = value;
            }
        }
        #endregion
        
        #region value Property
        /// <summary>
        /// The XML name of the <see cref="value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string valuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.MiscSettingAddElement.valuePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string value
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.MiscSettingAddElement.valuePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.MiscSettingAddElement.valuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// A collection of NameTypeElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Eagle.Core.Configuration.NameTypeElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Eagle.Core.Configuration.ResourceElementCollection.NameTypeElementPropertyName)]
    public partial class ResourceElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NameTypeElementPropertyName = "resource";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Eagle.Core.Configuration.ResourceElementCollection.NameTypeElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Eagle.Core.Configuration.ResourceElementCollection.NameTypeElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Eagle.Core.Configuration.NameTypeElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Eagle.Core.Configuration.NameTypeElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Eagle.Core.Configuration.NameTypeElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Eagle.Core.Configuration.NameTypeElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement this[int index]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement this[object name]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="resource">The <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Eagle.Core.Configuration.NameTypeElement resource)
        {
            base.BaseAdd(resource);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="resource">The <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Eagle.Core.Configuration.NameTypeElement resource)
        {
            base.BaseRemove(this.GetElementKey(resource));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement GetItemAt(int index)
        {
            return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement GetItemByKey(string name)
        {
            return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The NameTypeElement Configuration Element.
    /// </summary>
    public partial class NameTypeElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.NameTypeElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.NameTypeElement.NamePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.NameTypeElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.NameTypeElement.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.NameTypeElement.TypePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.NameTypeElement.TypePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// A collection of NameTypeElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Eagle.Core.Configuration.NameTypeElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Eagle.Core.Configuration.ControllerElementCollection.NameTypeElementPropertyName)]
    public partial class ControllerElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NameTypeElementPropertyName = "controller";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Eagle.Core.Configuration.ControllerElementCollection.NameTypeElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Eagle.Core.Configuration.ControllerElementCollection.NameTypeElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Eagle.Core.Configuration.NameTypeElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Eagle.Core.Configuration.NameTypeElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Eagle.Core.Configuration.NameTypeElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Eagle.Core.Configuration.NameTypeElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement this[int index]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement this[object name]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="controller">The <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Eagle.Core.Configuration.NameTypeElement controller)
        {
            base.BaseAdd(controller);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="controller">The <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Eagle.Core.Configuration.NameTypeElement controller)
        {
            base.BaseRemove(this.GetElementKey(controller));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement GetItemAt(int index)
        {
            return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement GetItemByKey(string name)
        {
            return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The WindowsMvcElement Configuration Element.
    /// </summary>
    public partial class WindowsMvcElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Controllers Property
        /// <summary>
        /// The XML name of the <see cref="Controllers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ControllersPropertyName = "controllers";
        
        /// <summary>
        /// Gets or sets the Controllers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Controllers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.WindowsMvcElement.ControllersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.ControllerElementCollection Controllers
        {
            get
            {
                return ((global::Eagle.Core.Configuration.ControllerElementCollection)(base[global::Eagle.Core.Configuration.WindowsMvcElement.ControllersPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.WindowsMvcElement.ControllersPropertyName] = value;
            }
        }
        #endregion
        
        #region DefaultControllerFactory Property
        /// <summary>
        /// The XML name of the <see cref="DefaultControllerFactory"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultControllerFactoryPropertyName = "defaultControllerFactory";
        
        /// <summary>
        /// Gets or sets the DefaultControllerFactory.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The DefaultControllerFactory.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.WindowsMvcElement.DefaultControllerFactoryPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.SingleProviderElement DefaultControllerFactory
        {
            get
            {
                return ((global::Eagle.Core.Configuration.SingleProviderElement)(base[global::Eagle.Core.Configuration.WindowsMvcElement.DefaultControllerFactoryPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.WindowsMvcElement.DefaultControllerFactoryPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// A collection of NameTypeElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Eagle.Core.Configuration.NameTypeElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Eagle.Core.Configuration.SerializationFormatElementCollection.NameTypeElementPropertyName)]
    public partial class SerializationFormatElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NameTypeElementPropertyName = "format";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Eagle.Core.Configuration.SerializationFormatElementCollection.NameTypeElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Eagle.Core.Configuration.SerializationFormatElementCollection.NameTypeElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Eagle.Core.Configuration.NameTypeElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Eagle.Core.Configuration.NameTypeElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Eagle.Core.Configuration.NameTypeElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Eagle.Core.Configuration.NameTypeElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement this[int index]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement this[object name]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="format">The <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Eagle.Core.Configuration.NameTypeElement format)
        {
            base.BaseAdd(format);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="format">The <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Eagle.Core.Configuration.NameTypeElement format)
        {
            base.BaseRemove(this.GetElementKey(format));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement GetItemAt(int index)
        {
            return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement GetItemByKey(string name)
        {
            return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultPropertyName = "default";
        
        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.SerializationFormatElementCollection.DefaultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Default
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.SerializationFormatElementCollection.DefaultPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.SerializationFormatElementCollection.DefaultPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// A collection of NameTypeElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Eagle.Core.Configuration.NameTypeElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Eagle.Core.Configuration.CacheManagerElementCollection.NameTypeElementPropertyName)]
    public partial class CacheManagerElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NameTypeElementPropertyName = "cacheManager";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Eagle.Core.Configuration.CacheManagerElementCollection.NameTypeElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Eagle.Core.Configuration.CacheManagerElementCollection.NameTypeElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Eagle.Core.Configuration.NameTypeElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Eagle.Core.Configuration.NameTypeElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Eagle.Core.Configuration.NameTypeElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Eagle.Core.Configuration.NameTypeElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement this[int index]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement this[object name]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="cacheManager">The <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Eagle.Core.Configuration.NameTypeElement cacheManager)
        {
            base.BaseAdd(cacheManager);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="cacheManager">The <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Eagle.Core.Configuration.NameTypeElement cacheManager)
        {
            base.BaseRemove(this.GetElementKey(cacheManager));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement GetItemAt(int index)
        {
            return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.NameTypeElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.NameTypeElement GetItemByKey(string name)
        {
            return ((global::Eagle.Core.Configuration.NameTypeElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Default Property
        /// <summary>
        /// The XML name of the <see cref="Default"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string DefaultPropertyName = "default";
        
        /// <summary>
        /// Gets or sets the Default.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Default.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.CacheManagerElementCollection.DefaultPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Default
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.CacheManagerElementCollection.DefaultPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.CacheManagerElementCollection.DefaultPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The RedisElement Configuration Element.
    /// </summary>
    public partial class RedisElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region WriteHosts Property
        /// <summary>
        /// The XML name of the <see cref="WriteHosts"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string WriteHostsPropertyName = "writeHosts";
        
        /// <summary>
        /// Gets or sets the WriteHosts.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The WriteHosts.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.RedisElement.WriteHostsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string WriteHosts
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.RedisElement.WriteHostsPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.RedisElement.WriteHostsPropertyName] = value;
            }
        }
        #endregion
        
        #region ReadOnlyHosts Property
        /// <summary>
        /// The XML name of the <see cref="ReadOnlyHosts"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ReadOnlyHostsPropertyName = "readOnlyHosts";
        
        /// <summary>
        /// Gets or sets the ReadOnlyHosts.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The ReadOnlyHosts.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.RedisElement.ReadOnlyHostsPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string ReadOnlyHosts
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.RedisElement.ReadOnlyHostsPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.RedisElement.ReadOnlyHostsPropertyName] = value;
            }
        }
        #endregion
        
        #region MaxWritePoolSize Property
        /// <summary>
        /// The XML name of the <see cref="MaxWritePoolSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string MaxWritePoolSizePropertyName = "maxWritePoolSize";
        
        /// <summary>
        /// Gets or sets the MaxWritePoolSize.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The MaxWritePoolSize.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.RedisElement.MaxWritePoolSizePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=60)]
        public virtual int MaxWritePoolSize
        {
            get
            {
                return ((int)(base[global::Eagle.Core.Configuration.RedisElement.MaxWritePoolSizePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.RedisElement.MaxWritePoolSizePropertyName] = value;
            }
        }
        #endregion
        
        #region MaxReadPoolSize Property
        /// <summary>
        /// The XML name of the <see cref="MaxReadPoolSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string MaxReadPoolSizePropertyName = "maxReadPoolSize";
        
        /// <summary>
        /// Gets or sets the MaxReadPoolSize.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The MaxReadPoolSize.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.RedisElement.MaxReadPoolSizePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=60)]
        public virtual int MaxReadPoolSize
        {
            get
            {
                return ((int)(base[global::Eagle.Core.Configuration.RedisElement.MaxReadPoolSizePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.RedisElement.MaxReadPoolSizePropertyName] = value;
            }
        }
        #endregion
        
        #region AutoStart Property
        /// <summary>
        /// The XML name of the <see cref="AutoStart"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string AutoStartPropertyName = "autoStart";
        
        /// <summary>
        /// Gets or sets the AutoStart.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The AutoStart.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.RedisElement.AutoStartPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="True")]
        public virtual bool AutoStart
        {
            get
            {
                return ((bool)(base[global::Eagle.Core.Configuration.RedisElement.AutoStartPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.RedisElement.AutoStartPropertyName] = value;
            }
        }
        #endregion
        
        #region TimeOutSeconds Property
        /// <summary>
        /// The XML name of the <see cref="TimeOutSeconds"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TimeOutSecondsPropertyName = "timeOutSeconds";
        
        /// <summary>
        /// Gets or sets the TimeOutSeconds.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The TimeOutSeconds.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.RedisElement.TimeOutSecondsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue=3600)]
        public virtual int TimeOutSeconds
        {
            get
            {
                return ((int)(base[global::Eagle.Core.Configuration.RedisElement.TimeOutSecondsPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.RedisElement.TimeOutSecondsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// A collection of HandlerElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Eagle.Core.Configuration.HandlerElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Eagle.Core.Configuration.HandlerElementCollection.HandlerElementPropertyName)]
    public partial class HandlerElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Eagle.Core.Configuration.HandlerElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string HandlerElementPropertyName = "handler";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Eagle.Core.Configuration.HandlerElementCollection.HandlerElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Eagle.Core.Configuration.HandlerElementCollection.HandlerElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Eagle.Core.Configuration.HandlerElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Eagle.Core.Configuration.HandlerElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Eagle.Core.Configuration.HandlerElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Eagle.Core.Configuration.HandlerElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.HandlerElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.HandlerElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.HandlerElement this[int index]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.HandlerElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.HandlerElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.HandlerElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.HandlerElement this[object name]
        {
            get
            {
                return ((global::Eagle.Core.Configuration.HandlerElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Eagle.Core.Configuration.HandlerElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="handler">The <see cref="global::Eagle.Core.Configuration.HandlerElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Eagle.Core.Configuration.HandlerElement handler)
        {
            base.BaseAdd(handler);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Eagle.Core.Configuration.HandlerElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="handler">The <see cref="global::Eagle.Core.Configuration.HandlerElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Eagle.Core.Configuration.HandlerElement handler)
        {
            base.BaseRemove(this.GetElementKey(handler));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.HandlerElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Core.Configuration.HandlerElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.HandlerElement GetItemAt(int index)
        {
            return ((global::Eagle.Core.Configuration.HandlerElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Core.Configuration.HandlerElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Core.Configuration.HandlerElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Core.Configuration.HandlerElement GetItemByKey(string name)
        {
            return ((global::Eagle.Core.Configuration.HandlerElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The HandlerElement Configuration Element.
    /// </summary>
    public partial class HandlerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.HandlerElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.HandlerElement.NamePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.HandlerElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.HandlerElement.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.HandlerElement.TypePropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.HandlerElement.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region Kind Property
        /// <summary>
        /// The XML name of the <see cref="Kind"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string KindPropertyName = "kind";
        
        /// <summary>
        /// Gets or sets the Kind.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Kind.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.HandlerElement.KindPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Kind
        {
            get
            {
                return ((string)(base[global::Eagle.Core.Configuration.HandlerElement.KindPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.HandlerElement.KindPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Core.Configuration
{
    
    
    /// <summary>
    /// The GeneratorsElement Configuration Element.
    /// </summary>
    public partial class GeneratorsElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region SequenceGenerator Property
        /// <summary>
        /// The XML name of the <see cref="SequenceGenerator"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string SequenceGeneratorPropertyName = "sequenceGenerator";
        
        /// <summary>
        /// Gets or sets the SequenceGenerator.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The SequenceGenerator.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.GeneratorsElement.SequenceGeneratorPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.SingleProviderElement SequenceGenerator
        {
            get
            {
                return ((global::Eagle.Core.Configuration.SingleProviderElement)(base[global::Eagle.Core.Configuration.GeneratorsElement.SequenceGeneratorPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.GeneratorsElement.SequenceGeneratorPropertyName] = value;
            }
        }
        #endregion
        
        #region IdentityGenerator Property
        /// <summary>
        /// The XML name of the <see cref="IdentityGenerator"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string IdentityGeneratorPropertyName = "identityGenerator";
        
        /// <summary>
        /// Gets or sets the IdentityGenerator.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The IdentityGenerator.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Core.Configuration.GeneratorsElement.IdentityGeneratorPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Core.Configuration.SingleProviderElement IdentityGenerator
        {
            get
            {
                return ((global::Eagle.Core.Configuration.SingleProviderElement)(base[global::Eagle.Core.Configuration.GeneratorsElement.IdentityGeneratorPropertyName]));
            }
            set
            {
                base[global::Eagle.Core.Configuration.GeneratorsElement.IdentityGeneratorPropertyName] = value;
            }
        }
        #endregion
    }
}
