//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EApp.Common.Configuration
{
    
    
    /// <summary>
    /// The EAppConfigurationSection Configuration Section.
    /// </summary>
    public partial class EAppConfigurationSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the EAppConfigurationSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EAppConfigurationSectionSectionName = "EApp";
        
        /// <summary>
        /// Gets the EAppConfigurationSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public static global::EApp.Common.Configuration.EAppConfigurationSection Instance
        {
            get
            {
                return ((global::EApp.Common.Configuration.EAppConfigurationSection)(global::System.Configuration.ConfigurationManager.GetSection(global::EApp.Common.Configuration.EAppConfigurationSection.EAppConfigurationSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Common.Configuration.EAppConfigurationSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::EApp.Common.Configuration.EAppConfigurationSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ObjectContainer Property
        /// <summary>
        /// The XML name of the <see cref="ObjectContainer"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ObjectContainerPropertyName = "objectContainer";
        
        /// <summary>
        /// Gets or sets the ObjectContainer.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The ObjectContainer.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Common.Configuration.EAppConfigurationSection.ObjectContainerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EApp.Common.Configuration.CurrentObjectContainerElement ObjectContainer
        {
            get
            {
                return ((global::EApp.Common.Configuration.CurrentObjectContainerElement)(base[global::EApp.Common.Configuration.EAppConfigurationSection.ObjectContainerPropertyName]));
            }
            set
            {
                base[global::EApp.Common.Configuration.EAppConfigurationSection.ObjectContainerPropertyName] = value;
            }
        }
        #endregion
        
        #region Logger Property
        /// <summary>
        /// The XML name of the <see cref="Logger"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string LoggerPropertyName = "logger";
        
        /// <summary>
        /// Gets or sets the Logger.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Logger.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Common.Configuration.EAppConfigurationSection.LoggerPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EApp.Common.Configuration.CurrentLoggerElement Logger
        {
            get
            {
                return ((global::EApp.Common.Configuration.CurrentLoggerElement)(base[global::EApp.Common.Configuration.EAppConfigurationSection.LoggerPropertyName]));
            }
            set
            {
                base[global::EApp.Common.Configuration.EAppConfigurationSection.LoggerPropertyName] = value;
            }
        }
        #endregion
        
        #region Application Property
        /// <summary>
        /// The XML name of the <see cref="Application"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ApplicationPropertyName = "application";
        
        /// <summary>
        /// Gets or sets the Application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Application.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Common.Configuration.EAppConfigurationSection.ApplicationPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EApp.Common.Configuration.CurrentApplicationElement Application
        {
            get
            {
                return ((global::EApp.Common.Configuration.CurrentApplicationElement)(base[global::EApp.Common.Configuration.EAppConfigurationSection.ApplicationPropertyName]));
            }
            set
            {
                base[global::EApp.Common.Configuration.EAppConfigurationSection.ApplicationPropertyName] = value;
            }
        }
        #endregion
        
        #region AppPlugins Property
        /// <summary>
        /// The XML name of the <see cref="AppPlugins"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string AppPluginsPropertyName = "appPlugins";
        
        /// <summary>
        /// Gets or sets the AppPlugins.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The AppPlugins.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Common.Configuration.EAppConfigurationSection.AppPluginsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::EApp.Common.Configuration.AppPluginElementCollection AppPlugins
        {
            get
            {
                return ((global::EApp.Common.Configuration.AppPluginElementCollection)(base[global::EApp.Common.Configuration.EAppConfigurationSection.AppPluginsPropertyName]));
            }
            set
            {
                base[global::EApp.Common.Configuration.EAppConfigurationSection.AppPluginsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EApp.Common.Configuration
{
    
    
    /// <summary>
    /// The CurrentObjectContainerElement Configuration Element.
    /// </summary>
    public partial class CurrentObjectContainerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the Provider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Provider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Common.Configuration.CurrentObjectContainerElement.ProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::EApp.Common.Configuration.CurrentObjectContainerElement.ProviderPropertyName]));
            }
            set
            {
                base[global::EApp.Common.Configuration.CurrentObjectContainerElement.ProviderPropertyName] = value;
            }
        }
        #endregion
        
        #region InitFromConfigFile Property
        /// <summary>
        /// The XML name of the <see cref="InitFromConfigFile"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string InitFromConfigFilePropertyName = "initFromConfigFile";
        
        /// <summary>
        /// Gets or sets the InitFromConfigFile.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The InitFromConfigFile.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Common.Configuration.CurrentObjectContainerElement.InitFromConfigFilePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool InitFromConfigFile
        {
            get
            {
                return ((bool)(base[global::EApp.Common.Configuration.CurrentObjectContainerElement.InitFromConfigFilePropertyName]));
            }
            set
            {
                base[global::EApp.Common.Configuration.CurrentObjectContainerElement.InitFromConfigFilePropertyName] = value;
            }
        }
        #endregion
        
        #region SectionName Property
        /// <summary>
        /// The XML name of the <see cref="SectionName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string SectionNamePropertyName = "sectionName";
        
        /// <summary>
        /// Gets or sets the SectionName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The SectionName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Common.Configuration.CurrentObjectContainerElement.SectionNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string SectionName
        {
            get
            {
                return ((string)(base[global::EApp.Common.Configuration.CurrentObjectContainerElement.SectionNamePropertyName]));
            }
            set
            {
                base[global::EApp.Common.Configuration.CurrentObjectContainerElement.SectionNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EApp.Common.Configuration
{
    
    
    /// <summary>
    /// The CurrentLoggerElement Configuration Element.
    /// </summary>
    public partial class CurrentLoggerElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the Provider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Provider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Common.Configuration.CurrentLoggerElement.ProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::EApp.Common.Configuration.CurrentLoggerElement.ProviderPropertyName]));
            }
            set
            {
                base[global::EApp.Common.Configuration.CurrentLoggerElement.ProviderPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EApp.Common.Configuration
{
    
    
    /// <summary>
    /// The CurrentApplicationElement Configuration Element.
    /// </summary>
    public partial class CurrentApplicationElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Provider Property
        /// <summary>
        /// The XML name of the <see cref="Provider"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string ProviderPropertyName = "provider";
        
        /// <summary>
        /// Gets or sets the Provider.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Provider.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Common.Configuration.CurrentApplicationElement.ProviderPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Provider
        {
            get
            {
                return ((string)(base[global::EApp.Common.Configuration.CurrentApplicationElement.ProviderPropertyName]));
            }
            set
            {
                base[global::EApp.Common.Configuration.CurrentApplicationElement.ProviderPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace EApp.Common.Configuration
{
    
    
    /// <summary>
    /// A collection of AppPluginElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::EApp.Common.Configuration.AppPluginElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::EApp.Common.Configuration.AppPluginElementCollection.AppPluginElementPropertyName)]
    public partial class AppPluginElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::EApp.Common.Configuration.AppPluginElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string AppPluginElementPropertyName = "appPlugin";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::EApp.Common.Configuration.AppPluginElementCollection.AppPluginElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::EApp.Common.Configuration.AppPluginElementCollection.AppPluginElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::EApp.Common.Configuration.AppPluginElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::EApp.Common.Configuration.AppPluginElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::EApp.Common.Configuration.AppPluginElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::EApp.Common.Configuration.AppPluginElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::EApp.Common.Configuration.AppPluginElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::EApp.Common.Configuration.AppPluginElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::EApp.Common.Configuration.AppPluginElement this[int index]
        {
            get
            {
                return ((global::EApp.Common.Configuration.AppPluginElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::EApp.Common.Configuration.AppPluginElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::EApp.Common.Configuration.AppPluginElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::EApp.Common.Configuration.AppPluginElement this[object name]
        {
            get
            {
                return ((global::EApp.Common.Configuration.AppPluginElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::EApp.Common.Configuration.AppPluginElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="appPlugin">The <see cref="global::EApp.Common.Configuration.AppPluginElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::EApp.Common.Configuration.AppPluginElement appPlugin)
        {
            base.BaseAdd(appPlugin);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::EApp.Common.Configuration.AppPluginElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="appPlugin">The <see cref="global::EApp.Common.Configuration.AppPluginElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::EApp.Common.Configuration.AppPluginElement appPlugin)
        {
            base.BaseRemove(this.GetElementKey(appPlugin));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::EApp.Common.Configuration.AppPluginElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::EApp.Common.Configuration.AppPluginElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::EApp.Common.Configuration.AppPluginElement GetItemAt(int index)
        {
            return ((global::EApp.Common.Configuration.AppPluginElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::EApp.Common.Configuration.AppPluginElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::EApp.Common.Configuration.AppPluginElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::EApp.Common.Configuration.AppPluginElement GetItemByKey(string name)
        {
            return ((global::EApp.Common.Configuration.AppPluginElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace EApp.Common.Configuration
{
    
    
    /// <summary>
    /// The AppPluginElement Configuration Element.
    /// </summary>
    public partial class AppPluginElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Common.Configuration.AppPluginElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::EApp.Common.Configuration.AppPluginElement.NamePropertyName]));
            }
            set
            {
                base[global::EApp.Common.Configuration.AppPluginElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::EApp.Common.Configuration.AppPluginElement.TypePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::EApp.Common.Configuration.AppPluginElement.TypePropertyName]));
            }
            set
            {
                base[global::EApp.Common.Configuration.AppPluginElement.TypePropertyName] = value;
            }
        }
        #endregion
    }
}
