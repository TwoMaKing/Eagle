//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eagle.Data.Configuration
{
    
    
    /// <summary>
    /// The EAppDataConfigurationSection Configuration Section.
    /// </summary>
    public partial class EAppDataConfigurationSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the EAppDataConfigurationSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EAppDataConfigurationSectionSectionName = "EAppData";
        
        /// <summary>
        /// Gets the EAppDataConfigurationSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public static global::Eagle.Data.Configuration.EAppDataConfigurationSection Instance
        {
            get
            {
                return ((global::Eagle.Data.Configuration.EAppDataConfigurationSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Eagle.Data.Configuration.EAppDataConfigurationSection.EAppDataConfigurationSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Data.Configuration.EAppDataConfigurationSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Eagle.Data.Configuration.EAppDataConfigurationSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region EntityMappings Property
        /// <summary>
        /// The XML name of the <see cref="EntityMappings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EntityMappingsPropertyName = "entityMappings";
        
        /// <summary>
        /// Gets or sets the EntityMappings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The EntityMappings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Data.Configuration.EAppDataConfigurationSection.EntityMappingsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Eagle.Data.Configuration.EntityMappingConfigurationCollection EntityMappings
        {
            get
            {
                return ((global::Eagle.Data.Configuration.EntityMappingConfigurationCollection)(base[global::Eagle.Data.Configuration.EAppDataConfigurationSection.EntityMappingsPropertyName]));
            }
            set
            {
                base[global::Eagle.Data.Configuration.EAppDataConfigurationSection.EntityMappingsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Eagle.Data.Configuration
{
    
    
    /// <summary>
    /// A collection of EntityMappingElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Eagle.Data.Configuration.EntityMappingElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap, AddItemName="add", RemoveItemName="remove", ClearItemsName="clear")]
    public partial class EntityMappingConfigurationCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string EntityMappingElementPropertyName = "add";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.AddRemoveClearMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override string ElementName
        {
            get
            {
                return global::Eagle.Data.Configuration.EntityMappingConfigurationCollection.EntityMappingElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Eagle.Data.Configuration.EntityMappingConfigurationCollection.EntityMappingElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Eagle.Data.Configuration.EntityMappingElement)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Eagle.Data.Configuration.EntityMappingElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Data.Configuration.EntityMappingElement this[int index]
        {
            get
            {
                return ((global::Eagle.Data.Configuration.EntityMappingElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Data.Configuration.EntityMappingElement this[object name]
        {
            get
            {
                return ((global::Eagle.Data.Configuration.EntityMappingElement)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Add(global::Eagle.Data.Configuration.EntityMappingElement add)
        {
            base.BaseAdd(add);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public void Remove(global::Eagle.Data.Configuration.EntityMappingElement add)
        {
            base.BaseRemove(this.GetElementKey(add));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Data.Configuration.EntityMappingElement GetItemAt(int index)
        {
            return ((global::Eagle.Data.Configuration.EntityMappingElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::Eagle.Data.Configuration.EntityMappingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public global::Eagle.Data.Configuration.EntityMappingElement GetItemByKey(string name)
        {
            return ((global::Eagle.Data.Configuration.EntityMappingElement)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Eagle.Data.Configuration
{
    
    
    /// <summary>
    /// The EntityMappingElement Configuration Element.
    /// </summary>
    public partial class EntityMappingElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Data.Configuration.EntityMappingElement.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::Eagle.Data.Configuration.EntityMappingElement.NamePropertyName]));
            }
            set
            {
                base[global::Eagle.Data.Configuration.EntityMappingElement.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region File Property
        /// <summary>
        /// The XML name of the <see cref="File"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        internal const string FilePropertyName = "file";
        
        /// <summary>
        /// Gets or sets the File.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.0.5")]
        [global::System.ComponentModel.DescriptionAttribute("The File.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Eagle.Data.Configuration.EntityMappingElement.FilePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string File
        {
            get
            {
                return ((string)(base[global::Eagle.Data.Configuration.EntityMappingElement.FilePropertyName]));
            }
            set
            {
                base[global::Eagle.Data.Configuration.EntityMappingElement.FilePropertyName] = value;
            }
        }
        #endregion
    }
}
